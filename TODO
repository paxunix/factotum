- a way to run the script in top frame or in every frame?
    - probably need a new metadata toggle for that
    - need a way for only one instance of the script to run, if desired
      (otherwise they all run)

- how to reconnect the injected script to the extension after an extension
  reload?  Currently, if the extension is reloaded, it is dead in all
  existing tabs.

- migrate to using polymer-cli instead of vulcanize+crisper

- need a linter for Fcommands that detects issues
    - bgCode and regular code but context is "bg" (so only bg code will run)

- need a way to detect on extension reload that the pages need to be
  reloaded so the Factotum connection can be re-established.
    (I think that's why Fcommands don't work on pages that were loaded from
    before the reload).
        - alternatively, figure out a way to make it work (might be tough if
          the injected code is no longer compatible with the extension
          code).

- help page
    - allow string substitution in the help content
      - {{keywordList}} expands to comma-separated list of keywords
      - {{keyword}} expands to first keyword
      - {{title}} expands to Fcommand's title

- factotum URL entry
    - should it clear on failure?
    - should there be some other UI indication of failure instead of just
      logging the error?

- errors page
    - needs a way to enter how many errors should be kept in the buffer
    - needs to show a timestamp of when the error occurred
    - would like better stacktraces

- consider an fcommand: protocol handler that lets a user specify an
  Fcommand and parameters
        fcommand:loadjq --version 1.2.6 --min
    - this lets you create a bookmark and have one-click running of
      pre-canned fcommands
    - it should confirm on the first time it ever runs a given version of
      an Fcommand via protocol like this (it prevents hijacking or phishing
      for fcommands)
    - you could extend this farther with some kind of variables:
        fcommand:loadjq --version ${VER} --min
            - where does VER get defined?
    - or maybe if you want to be really crazy, it's actually a
      template string
        fcommand:loadjq --version ${window.prompt("JQ version:", "1.2.6")} --min
    - it's already able to run arbitrary javascript--there is no need for
      anything beyond the protocol handler and running it
    - this might not be possible--I don't know if chrome is continuing to
      support arbitrary protocol handlers.  If not, then we need a mechanism
      that can invoke an Fcommand from some javascript in a page.  This is a
      security nightmare because then any page could run any Fcommand
      without the user even knowing.

- since the context menu integration doesn't actually care about the page's
  document, it's not as useful as you would expect
    - maybe need a context menu handler in every page so that context
      Fcommands can have access to whatever object was right-clicked
        - although, maybe only if the fcommand is context=page fcommand and
          menu= is given, then it hooks into the page itself
        - otherwise, for context=bg and menu=, it's a ubiquitous context
          menu command, since it doesn't need page data
    - since the right click in the page and the context menu showing up are
      two entirely different events in two different worlds, within the page
      some state would have to be stored by the content script so that when
      the context menu option was selected, the Fcommand code could retrieve
      the state data.

- consider validating that the minimum transferobject fields needed are
  present in each context

- Omnibox now does prefix matching, which could still yield an ambiguous
  result if you have multiple Fcommands with the same prefix on their
  keywords.
    - maybe if there is more than one match, the default suggestion does
      nothing in order to encourage the user to select one below to
      disambiguate
    - if there is only one, it's fine to set it as the default suggestion

- should each Fcommand have its own config data?  Some Fcommands might want
  to allow the user to save a setting that controls Fcommand behaviour.

- can use chrome.alarms to schedule Fcommand update checks

- might be useful to have a method to log a message to the collected set of
  errors, etc. saved in the bg page.  Something like console.log, but it
  sends a message to bg and saves the message.  Could then use the same
  mechanism for all errors, warnings, notifications, etc.

- investigate how to catch and surface errors when an Fcommand does
  something forbidden by the active page's CSP.
    - should provide mechanism to override CSP by intercepting requests?  I
      think this is going to be necessary, or some Fcommands just won't work
      on some pages because of their CSP.

- record all errors passed back to bg from Fcommands and present them from a
  menu option
    - use a ring buffer?

- now that omnibox suggestions' content gets the --guid=n appended to it,
  you can have a situation where the user selects one, but then starts
  typing afer the --guid=n value.  Accepting this modified command line will
  invoke the exact match of the keyword, rather than what is specified by
  the guid.  This will be surprising to users.

- could just use the chrome filesystem sync api to store the factotum
  commands on the user's google drive and then make them available in all
  clients
    - should be able to toggle which ones you want sync'd and which you
      don't (so you can have a set of scripts just for work that aren't
      sync'd to your home account)?  Or just handle this via chrome profiles?

- what if you have more of the same Fcommand names than will fit in
  the omnibox dropdown?

- provide a management interface on the options page just for F commands
    - shows a list of commands
    - support enabling/disabling F commands
    - support enable/disable of individual aliases for Fcommands???
        - useful if you have an Fcommand that supplies an alias you don't
          want because it's supplied by a different Fcommand
    - editing commands
    - exporting commands

- support commands from non-local sources
    - e.g. specifying a URL will pull the Fcommand from the URL and use it.
        - need to specify the data format.
    - can these be edited locally???
        - do we store a diff so you could apply a patch if the Fcommand were
          updated and you wanted to keep your changes?

- should supply handy notification icons so bg code can easily pop a
  notification using standard icons included in the extension (then there's
  no cross-origin issues).  Makes sense to expose the internal URLs, since
  the extension will need them anyway.

- maybe a hotkey that doesn't use the omnibox at all; but then you basically
  build your own omnibox functionality in a popup.  Then you can put
  whatever you want in it.  With polymer, a lot of the functionality of a
  nice look-and-feel might be "free".
    - not sure how that would affect the notion of the "current tab" in
      which the Fcommand would execute.
    - it would mean there would always be a window, so that an Fcommand
      could execute regardless of whether it was bg or page context but the
      user happened to be on an internal page
    - Ubiquity used to be invoked this way (Ctrl-Space)
    - This is possible now with the chrome.commands API

- should Fcommands have an associated domain match on which they are
  available, and are otherwise suppressed?  It would be nice to have the
  context menu for an Fcommand to only show on a page on which it's useful
