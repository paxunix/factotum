- investigate how to catch and surface errors when an Fcommand does
  something forbidden by the active page's CSP.

- record all errors passed back to bg from Fcommands and present them from a
  menu option
    - use a ring buffer?

- could listen for omnibox event onInputStarted and show the info that
  commands can't be run on internal pages
    - however, this only matters if they're running a non-bg fcommand, so
      you can't know this when input has started, only once the set of
      possible fcommands is known
    - onInputEntered's callback specifies if the tab is current, new fg or
      new bg;  that info should be available to the Fcommand/bg script

- would be cool to flag an fcommand as taking no parameters and being able
  to be run from the context menu.  Then we can populate the context menu
  with those Fcommands and when you click one, it runs it as if you had
  typed its name in the omnibox

- could just use the chrome filesystem sync api to store the factotum
  commands on the user's google drive and then make them available in all
  clients
    - should be able to toggle which ones you want sync'd and which you
      don't (so you can have a set of scripts just for work that aren't
      sync'd to your home account)?  Or just handle this via chrome profiles?

- create class that manages Fcommands  FcommandManager
    - Fcommands are stored in an IndexedDB
      - indexed on unique guid
      - indexed on name
    - constructor
        - sets up objectstore and indexes
    - addCommand
        - saves the given Fcommand
    - deleteCommand
        - removes the given Fcommand
    - getCommandsByName
        - returns list of Fcommand objects given a name.

- Fcommand datastore
    - keywords[] : indexed
    - guid : indexed, unique key
    - original document string
    - description
    - optSpec
    - help document string
    - bgcode string
    - all of the metadata fields (if showing them separately, might as well
      make them separate fields, although it seems silly to store the
      original document then duplicate all its data in separate fields; it's
      not silly if you wish to allow a user to override things in the
      Fcommand document).
    - enabled
    - priority: integer specifying the relative order of this Fcommand to
      others with overlapping keywords.  Lower number == highest priority.
      Priority is used only to determine the order of the Fcommand names in
      the omnibox dropdown.
        - what if you have more of the same Fcommand names than will fit in
          the omnibox dropdown?


----------------


- provide a management interface on the options page just for F commands
    - shows a list of commands
    - support enabling/disabling F commands
    - support enable/disable of individual aliases for Fcommands???
        - useful if you have an Fcommand that supplies an alias you don't
          want because it's supplied by a different Fcommand
    - shows their help content
    - editing commands
    - exporting commands

- internal Fcommand 'help' should pull up the help content for the given
  Fcommand
    - do this with a default --help option on an Fcommand
    - when help is requested, retrieve the Fcommand help markup

    - use Polymer's dialog for a nice look-and-feel
    - create custom tags for help to make writing the help markup easier.
      E.g. <help-opt></help-opt> <help-optarg></help-optarg>
      <help-section></help-section> <help-content></help-content>

- support commands from non-local sources
    - e.g. specifying a URL will pull the Fcommand from the URL and use it.
        - need to specify the data format.
    - can these be edited locally???
        - do we store a diff so you could apply a patch if the Fcommand were
          updated and you wanted to keep your changes?

- popup page could show the last N Fcommands and/or the most frequently used
  Fcommands

- need an option to toggle error notifications on/off?

- useful to make distinction between commands that require the current
  page's context and those that don't?
    - e.g. if an Fcommand is only opening a new tab, there's no need for it
      to run within the current page--it can run fine in the background page
    - too difficult to explain to users?

- fcommand's response object could have an extra field that if somehow set
  by the Fcommand's code (and the code succeeded) would indicate the
  extension should popup a notification with custom content.

- explore using a page action instead of a browser action for Factotum,
  since it (currently) requires a page in order to do pretty much anything.
  It would be great if there is a way to trigger the page action popup
  (since it's not possible to trigger it for the browser action).  Then it
  could be used for notifications, return statuses, etc.

- should supply handy notification icons so bg code can easily pop a
  notification using standard icons included in the extension (then there's
  no cross-origin issues).  Makes sense to expose the internal URLs, since
  the extension will need them anyway.
