- F commands are javascript stored in local storage.
  - doesn't clog up the extensions list
  - simple
  - use an abstraction that maps onto localStorage (making it easier to
    support alternate storage mechanisms as needed)


--------
- F commands are installed as plain old extensions
    - benefits from Chrome's existing sandbox model for security
    - benefits from Chrome's existing mechanism for automatic extension updates
    - no additional storage requirements for F commands
    - when installed, register themselves as supplying F commands
        - can supply more than one F command in a single extension
        - REJECTED: F could instead scan the list of installed extensions
          and send a command to each to see if it "exports" F commands, but
          that seems noisy and messy
        - an extension registers itself with F by supplying
            - an optspec for command line parsing for each F command
            - the name of each F command
        - an extension listens for F requests (the parsed command line is
          passed in every case)
            - command
            - help content
            - dynamic previewing
    - no need to register with F when an F command extension is uninstalled
      or disabled, since F's management interface listens for extensions
      being uninstalled, disabled, or enabled and won't dispatch to F
      commands that are not active.
    - if a command is registered by more than one extension, we can present
      both of them as possible omnibox choices.
        - user does not need to be notified at registration time that
          duplicates exist
        - should the user be able to specify an order?  This could be done
          on the management page.  Or should F learn which is more commonly
          used and put that one first?  If so, how does one reset the order?
          Maybe a combination and manually reordering them resets the order.

- F supports
    - listening for extensions being disabled/enabled to know when to
      enable/disable corresponding F commands
  
- F provides a management interface just for F commands
    - shows a list of commands and the extensions that supply them
    - supports enabling/disabling F commands
        - does not disable the extension, otherwise extensions that supply F
          commands as well as other functionality would have that other
          functionaly shut off also.
            - disabling the extension would also make it impossible to
              disable a subset of F commands supplied by an extension
        - is possible to enable an F command in a disabled extension by
          prompting to re-enable the extension.
    - shows their help content

- should F populate the omnibox results list based on the prefix of a
  command that has already been executed?  Should there be a separate popup?
  Probably only if there is a preview mode for that command.  Otherwise,
  it's just what you get in the omnibox.

- should F should install a content script everywhere that can run code on
  behalf of registered F commands?  Otherwise, every F command that needs to
  do DOM work will need its own content script.  Possible, but is that
  messy?
    - this is preferable to each F command installing its own content script
      because F commands are only run on demand, which means a content
      script that is loaded all the time isn't necessary.

- if you disable F then re-enable it, does it need to have commands
  re-registered?
    - if none of its data is cleared, I'd say no because the registrations
      that were in effect at disable will still be in effect.  HOWEVER, upon
      re-enable, if any of the registered commands' extensions are disabled
      or gone, F needs to update the state of those commands (e.g. an F
      command is uninstalled/disabled while F is disabled).
